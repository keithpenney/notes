VIM (VI) Text Editor Commands

Description:
    vim is a text editor with a long, complicated history and lots of legacy quirks.
    Originally came from "ed" -> "em" -> "ex" -> "vi" -> "vim"
    Ubiquitously used in the Unix world.
    Uses two modes: "Normal Mode" and "Insert Mode"
    "Normal Mode" accepts commands (see below).
    "Insert Mode" inputs text.
    Leave "Insert Mode" with the Escape key.

--- HELP ---
vimtutor	An interactive vim session to learn to use vim
:help {CMD}	At any point, you can use the ":help" command to learn about any command 'CMD'

Note:
    A "WORD" is defined as any sequence of non-blank characters separated by whitespace
    A 'word' is only alphanumeric characters, not including punctuation

=======================================
-------------- NAVIGATE ---------------
=======================================

hjkl = <v^> (same as arrow keys)

0 = move cursor to beginning of line

$ = move cursor to the end of a line

w = move cursor forward 1 word

W = move cursor forward 1 WORD

b = move cursor backward 1 word

B = move cursor backword 1 WORD

nw = (where n is an integer) move cursor forward n words

G = "Go" (maybe); moves cursor to end of file

gg = moves cursor to beginning of file

nG = :n = move cursor to line n

Ctrl+b = Page up (page "B"ackward)

Ctrl+f = Page down (page "F"orward)

Ctrl+u = Half-page Up

Ctrl+d = Half-page Down

H = move cursor to the "highest" line on the screen

M = move cursor to the "middle" line on the screen

L = move cursor to the "lowest" line on the screen

m = File mark.  Follow with any character. Lowercase characters
    are local markers.  Uppercase characters are global.

` = Jump to a previously defined file mark (see 'm' above).

Ctrl+] = follow a link (if enabled)

Ctrl+o = Ctrl+t = Return to previous location

=======================================
------------ THE VIEWPANE -------------
=======================================

Ctrl+y = move viewpane up one line

Ctrl+e = move viewpane down one line

zz = move the viewpane to center on the current line

zt = move the viewpane so that the current line is on top

zb = move the viewpane so that the current line is on bottom

:w = 'writeout' (save file)

:w newfile = 'writeout' to file name 'newfile'

:q = quit (exit)

:q = force quit

:wq = writeout and quit (quit and save)

=======================================
--------------- SEARCH ----------------
=======================================

/thing = search file for "thing" and places cursor at the first instance of "thing"

# = search file for word under cursor

n = search again (move to next instance)
    can also type / + <ENTER>

N = search again (move to previous instance)
    can also type ? + <ENTER>

:set ic = <set option> "ignore case" (case insensitive)

:set noic = <set option> turn off "ignore case" (case sensitive)

:set hls = <set option> "highlight search"

:set nohls = <set option> turn off "highlight search"

=======================================
--------------- DELETE ----------------
=======================================

x = delete character under the cursor

dw = delete word at the cursor position

de = same as dw as far as I can tell.

dd = delete the current line

D = d$ = delete from the cursor position to the end of the current line

n dd = delete n lines starting at the current cursor position

n dw = delete n words to the right of the current cursor position

dnw = same as n dw

=======================================
---------- CUT, COPY, PASTE -----------
=======================================

**Note!  Anything that is deleted is stored in the Vim register and can be pasted.
**In other words, delete works like cut.

v = enter visual select mode

y = "yank" (copy text hightlighted with v)
    yw = copy a single word
    yy = y$ = copy a single line

p = "paste"; paste text copied with y (or cut with x/d/D) after the cursor

P = "Paste"; paste text copied with y (or cut with x/d/D) before the cursor

u = undo last command

U = restore current line

Ctrl-R = redo last command

r 'char' = replace a single character with 'char' (e.g. re replaces the character with 'e')

:s/oldword/newword = replace first occurrence of "oldword" in current line with "newword"

    append /g ("global") to replace every occurrence in the current line

:%s/oldword/newword/g = replace every occurrence in the whole file

:#,#s/oldword/newword/g = replace every occurrence between the given line #'s

    append "c" to ask for confirmation before replacing words.

:r = retrieve.  Inserts text from a filename or location.  e.g. :r "filename"

    You can also pipe with this.
    e.g. :r !ls

=======================================
------- VISUAL-MODE COPY/PASTE --------
=======================================

Press v to enter visual highlight mode

Press : (you'll see :'<,'> at the bottom left)

Press w "filename" (you'll see :'<,'>w "filename")

Press ENTER to write highlighted text to "filename"

Move the cursor to the destination line

Press :r "filename" to write the contents of "filename" at that cursor position.   Note :r is for "retrieve"

=======================================
------------ INSERT MODE --------------
=======================================

i = enter insert mode at cursor position

A = 'append'; moves cursor one position to the right then enters insert mode

o = insert blank line BELOW cursor, then move cursor to the new blank line and enter insert mode

O = insert blank line ABOVE cursor, then move cursor to the new blank line and enter insert mode

R = goes into replace mode (like insert, but overwrites characters).

cw = ce = "change" to end of word (deletes until end of word then enters insert mode)

c$ = "change" to end of line.

=======================================
-------- STRING MANIPULATION ----------
=======================================

~ = Toggle the case of the character under the cursor

n~ = Toggle the case of the next 'n' characters starting from the cursor

=======================================
--------- MULTI-FILE EDITING ----------
=======================================
:e FILENAME = :edit FILENAME = Close current file and open FILENAME for editing.

vim file1.txt file2.c file3.py ...  Edit multiple files sequentially

:n = :next                          Switch to the next file in the list

:p = :previous                      Switch to the previous file in the list

:f = :first                         Switch to the first file in the list

:l = :last                          Switch to the last file in the list

:split FILENAME                     Open FILENAME in a split window (horizontally)

:vsplit FILENAME                    Open FILENAME in a split window (vertically)

<Ctrl> + W + j                      Move cursor to split window below

<Ctrl> + W + k                      Move cursor to split window above

<Ctrl> + W + h                      Move cursor to split window to the left

<Ctrl> + W + l                      Move cursor to split window to the right

:tabedit FILENAME                   Open FILENAME for editing in a new tab

:tabfind FILENAME                   Search path for FILENAME and open for editing in a new tab

:tabclose                           Close the current tab

:tabonly                            Close all other tabs except the current one

:tabs                               List all open tabs

:tabn                               Switch to the next tab (keymapped to 'gt' in normal mode)

:tabp                               Switch to the previous tab (keymapped to 'gT' in normal mode)

{i}gt                               Go to the i'th tab (i counts from 1)

:tabfirst                           Switch to the first tab

:tablast                            Switch to the last tab

:edit = :e                          Reload currently open file

:qa                                 Close all tabs

=======================================
------------ CODING TOOLS -------------
=======================================

% = parenthesis matching; highlight a (, {, or [ and hit % to highlight the matching ), }, or ]

=======================================
---------- EDITOR SETTINGS ------------
=======================================

:set SETTINGNAME=VALUE              Set a setting called 'SETTINGNAME' to a value 'VALUE'

:set tabstop=4                      Set the displayed tab size to 4 characters

:set shiftwidth=4                   Set the displayed indent width to 4 characters (not sure how this is different)
                                    Make these settings permanent by adding the lines to your vimrc file.

=======================================
------------- vimrc FILE --------------
=======================================

:e $HOME/.vimrc                     Edit (or create) the user vimrc file (Unix/Linux)
:e $HOME/_vimrc                     Edit (or create) the user vimrc file (Windows)

:echo $HOME                         Echo the value of the $HOME variable
:echo $VIM                          Echo the value of the $VIM variable

=======================================
--------- EXTERNAL COMMANDS -----------
=======================================

: = accept a long command (hit enter to execute)

:!"command" = call an external terminal command

:"char" <CTRL> + D = shows all external commands that start with the char string "char"
    type <TAB> to complete the command in alphabetical order

=======================================
------------- VIMSCRIPT ---------------
=======================================

https://www.ibm.com/developerworks/library/l-vim-script-1/index.html
http://learnvimscriptthehardway.stevelosh.com/
https://vimhelp.org/usr_41.txt.html#function-list
https://devhints.io/vimscript

:help vim-script-intro              An introduction to Vimscript (run from inside Vim).
:help keycodes                      Show a list of keycodes Vim can interpret.

Running Vimscripts:
    Vim script files are typically given the extension '.vim' and are executed as follows.

    :source /path/to/scriptfile.vim

    Alternatively, you can always run a vimscript command from normal mode, but that takes a lot of typing.

    :call MyFunc(...)               Call some function MyFunc() with args ...

Key Mapping:
    A common way to run Vim scripts is to map them to a key combination in normal mode.

    :nmap ;s :source /path/to/scriptfile.vim<CR>

    The built-in function 'nmap' (Normal-mode key MAPping) above maps the key combination ;s to the Vim script.
    Of course, if this line is itself in a Vim script, the leading colon : is dropped.
    Also note, Vim interprets the character combination "<CR>" as a carriage return.

  Key Mapping:
    Note! Don't add end-of-line comments to mapping. It'll make life miserable.
    nmap <key> <command>            "Map key <key> to command <command> in NORMAL mode
    vmap <key> <command>            "Map key <key> to command <command> in VISUAL mode
    imap <key> <command>            "Map key <key> to command <command> in INSERT mode
    nnoremap <keycombo> <command>   "<keycombo> must be pressed in quick succession for mapping to apply
    vnoremap <keycombo> <command>   "<keycombo> must be pressed in quick succession for mapping to apply
    inoremap <keycombo> <command>   "<keycombo> must be pressed in quick succession for mapping to apply

    Keys and Key Combos:
      Example key designation:
        a                           "The key 'a'
        z                           "The key 'z'
        A                           "The key 'A' (uppercase, Shift+A)
        <esc>                       "The escape key
        <c-d>                       "Ctrl+d

      Key combos are any valid key designations strung together, i.e:
        af                          "'a' followed quickly by 'f'
        jj                          "'j' pressed twice in quick succession
        <esc><c-t>                  "Escape key followed quickly by Ctrl+t

    Silent Mapping:
      We can follow the map keyword with '<silent>' to suppress any console output
      occurring in the function call.

    Leader Character:
      To provide a wide range of key mappings (much greater than the number of keys accessible on
      your keyboard), vim allows mapping of key combinations typed in quick succession (we saw this
      above with 'noremap'.  It's good to use a custom 'starting character' for all these
      combinations so we avoid vim waiting around after you press a key to see if you'll press
      another shortly after.

      Vim defines a custom key called <leader> which should be used for just this purpose (and can
      be set to whatever you want).  We choose our leader character using the reserved variable
      'mapleader', e.g.
        let mapleader = ","
      We can then map character combinations starting with our leader character using <leader>, e.g
        nnoremap <leader>d dd

Executing Vim Commands in Vimscript:
    :normal G                       Change to normal mode and execute the 'G' command (as if it were pressed)
                                    This would move the cursor to the bottom of the file if 'G' has not been
                                    re-mapped.
    :normal! G                      The '!' after 'normal' ignores any key remappings that have been defined
                                    either in the current session or in the .vimrc file.  This would ALWAYS
                                    move the cursor to the bottom of the file.

    :execute "echo 'hello world'"   Executes a string as if it were vimscript (in this case :echo 'hello world')
    :execute "normal! G"            Executes the string 'normal! G' - moves the cursor to the buffer bottom

Vimscript Statement Syntax:
    Vimscript statements are terminated by a newline character (like Python or Shell scripts).
    To continue a statement to multiple lines, you use a backslash character BUT!!! it's placed at the start of
    the NEXT line, not at the end of the PREVIOUS line!!!!  Weiiiiiiird!!!

    To put more than one statement on a single line, the vertical bar | can be used to separate each statement.
    The vertical bar works pretty much like a newline char.

    Comments:
        Comments begin with the double-quote character " and persist to the end of the line.
        This causes trouble!  Since strings also use the double-quote character ", comments are first interpreted as
        strings if a string is expected at that position.  The solution to this is to place a vertical bar | before
        the double-quote leading the comment.
        " - - - Example - - - "
        "This is a comment
        echo "this is a string" |" and this is a comment!
        " - - End Example - - "

Echoing Text:
  echo "This goes to temporary output"
  echom "This goes both to temporary output and to the message queue"

  From within a Vim editor, you can view the message queue with
    :messages

Strings:
  Strings use "double quotes" in general.
  Literal strings use 'single quotes' which avoids expansion of any escape sequences
  within the string.
    The one special character combination in a literal string is '' which yields a
    single quote '.

  Concatenation:
    echo "Hello" . " world"   |"Echos "Hello world" to stdout
    Note that if we try to use a + sign, it will attempt to coerce the strings into
    numbers and sum the numbers.

Variables:
  Assignment:
    Variable assignment uses the keyword 'let'.
    "- - - Example - - -"
    let name = "Keef"
    let age = 12
    let langs = ['C', 'Python', 'Go', 'VHDL']
    let favorites = {'color':'blue', 'number':3}
    "- - End Example - -"

  Boolean:
    In boolean contexts (i.e. conditional statements), vimscript treats the
    following as true:
      1
      "1"
      "8675209"
      "42isagoodnumber"

    And the folowing as false:
      0
      "0"
      "myfavoritenumberis42"

    If a boolean context is to evaluate a string for 'truthiness', it attempts
    to coerce the string into a number.  If the string starts with a number,
    that will result in said number (with non-numerical characters ignored).
    If the string starts with a non-number (i.e. a letter), it is assumed to
    not represent a number and the result is 0, thus false.

  Lists and Indexing:
    Lists/arrays are defined with square brackets, i.e.
      let mylist = ['hello', 123, ['this', 'one', 'is', ['nested!', 42]]]

    Indexing and slicing works like in Python, but more permissive, i.e.
      let mylist = [100, 200, 300, 400]
      :echo mylist[0]     "Echos 100
      :echo mylist[-2]    "Echos 300
      :echo mylist[1:2]   "Echos [200, 300] 
                          "Note that the upper limit is included (unlike Python)
      :echo mylist[1:100] "Echos [200, 300, 400]
                          "The upper limit can be exceeded

    Note, strings can be indexed/sliced just like lists.

Comparisons:
  >                       Integer comparison 'greater than'(works for strings?  What would it do?)
  <                       Integer comparison 'less than'
  ==                      Test for equality - depends on case-sensitivity settings for strings
  ==?                     Test for equality - always case-insensitive
  ==#                     Test for equality - always case-sensitive
  =~                      Test for regexp matching
  !~                      Test for regexp not matching

Conditionals and Loops:
  if CONDITION                    "IF statement
    ...
  elsif OTHERCONDITION
    ...
  endif                           "End the IF statement

  for i in [1, 2, 3, 4]           "FOR loop
    ...
  endfor                          "End the FOR loop

  Vimscript uses the standard 'break' keyword to break out of a loop.

Function Definitions:
  Note! If a function is unscoped (not exactly sure what that means in this context),
  its name must start with a capital letter.  In practice, all functions should start
  with a capital letter anyhow.

  function HelloWorld(name)       "Function 'HelloWorld' takes argument 'name'
    echom "Hello " . a:name       "Echo to screen and message log 'Hello ' concatenated with 'name'
    return 42
  endfunction                     "End the function definition
  call HelloWorld("keef")         "Call that bad boy, ignoring the returned value.
  let someNumber = HelloWorld("keef") "On the RHS, we don't need to use 'call' (I think)

  Arguments:
    Note that when we refer to an argument within a function, we need to prepend the
    arg name by 'a:' to indicate that we are looking for this indentifier in argument
    scope, not variable scope.

    Varargs:
      We can also define functions that take any number of arguments with the varargs
      elipses keyword '...'.
        function foo(bar, ...)         "Varargs syntax
          return a:bar + a:0 + a:1     "See below
        endfunction

      In this case, the arguments end up in argument scope numbered, i.e.:
        a:0       "The first argument passed
        a:1       "The second argument passed
        a:000     "A special list containing all the arguments passed

  Functions that do not have a 'return' statement implicitly return 0.
